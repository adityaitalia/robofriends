{"version":3,"sources":["components/Card.js","components/CardList.js","robots.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","width","height","CardList","robots","map","user","i","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","filteredrobots","requestRobots","isPending","filter","robot","toLowerCase","includes","connect","searchRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.077f681f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email ,id}) =>{\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} width=\"200\" height=\"200\"/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\treturn(\r\n\t\t<div>{\r\n\t\t\trobots.map((user,i)=>{\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card key={i} \r\n\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\temail={robots[i].email}/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n    \t\t\r\n    \t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Aditya Italia',\r\n    username: 'Italia',\r\n    email: 'italiaaditya@gmail.com'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Harsh Vora',\r\n    username: 'Antonette',\r\n    email: 'hagdu@gmail.com'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Saharsh Barve',\r\n    username: 'Samantha',\r\n    email: 'b3@gmail.com'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Siddharth Shah',\r\n    username: 'Karianne',\r\n    email: 'overthinker@gmail.com'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Vedant RC',\r\n    username: 'Kamren',\r\n    email: 'vrc@gmail.com'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolf',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clement DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'padberg@karina.biz'\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\nconst SearchBox =({searchChange}) =>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' placeholder='search robots'\r\n\t\t\tonChange={searchChange}/>\r\n\t\t</div>\r\n\t\t\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\t\t<div style={{overflow: 'scroll', border: '1px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError: true})\r\n\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Ooops</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport {robots} from '../robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport {setSearchField,requestRobots} from '../actions';\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nconst mapStateToProps= state=> {\r\n\treturn{\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps= (dispatch)=>{\r\n\treturn{\r\n\t\tonSearchChange: (event)=> dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots:()=>dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component{\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\t\r\n\trender(){\r\n\t\tconst {searchField,onSearchChange,requestRobots,isPending}=this.props;\r\n\t\tconst filteredrobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t});\r\n\t\treturn  (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filteredrobots}/>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\nimport {robots} from './robots';\r\n\r\n\r\nexport const setSearchField = (text) =>({\r\n\ttype: 'CHANGE_SEARCH_FIELD',\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () =>(dispatch)=>{\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('./robots')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS,payload: data}))\r\n\t\t.catch(error=>dispatch({type: REQUEST_ROBOTS_FAILED,payload: error}))\r\n}\r\n ","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch ={\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t \treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots={\r\n\tisPending: false,\r\n\trobots:[],\r\n\terror:''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({},state,{isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({},state,{robots:action.payload,isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({},state,{error:action.payload,isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {searchRobots,requestRobots} from './reducers';\r\nimport 'tachyons';\r\nimport {robots} from './robots';\r\n\r\nconst logger=createLogger();\r\nconst rootReducer=combineReducers({searchRobots,requestRobots});\r\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger))\r\n\r\nReactDOM.render(\r\n  <Provider store={store} >\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}